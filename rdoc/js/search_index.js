var search_data = {"index":{"searchIndex":["apn","app","connection","device","devicegrouping","errors","exceededmessagesizeerror","missingcertificateerror","feedback","group","groupnotification","notification","pullnotification","addlaunchnotificationtoapnpullnotifications","apnmigrationsgenerator","apnonrails","railtie","createpullnotifications","makedevicetokenindexnonunique","alert=()","alert=()","all_since()","apple_hash()","apple_hash()","cert()","create_migrations()","devices()","devices()","down()","down()","down()","latest_since()","log_connection_exception()","message_for_sending()","message_for_sending()","new()","next_migration_number()","open_for_delivery()","open_for_feedback()","payload()","payload_size()","process_devices()","process_devices()","process_devices()","process_devices_for_cert()","same_app_id()","send_group_notification()","send_group_notifications()","send_group_notifications()","send_notifications()","send_notifications()","send_notifications()","send_notifications_for_cert()","set_last_registered_at()","source_root()","to_apple_json()","to_apple_json()","to_hexa()","token=()","up()","up()","up()","readme"],"longSearchIndex":["apn","apn::app","apn::connection","apn::device","apn::devicegrouping","apn::errors","apn::errors::exceededmessagesizeerror","apn::errors::missingcertificateerror","apn::feedback","apn::group","apn::groupnotification","apn::notification","apn::pullnotification","addlaunchnotificationtoapnpullnotifications","apnmigrationsgenerator","apnonrails","apnonrails::railtie","createpullnotifications","makedevicetokenindexnonunique","apn::groupnotification#alert=()","apn::notification#alert=()","apn::pullnotification::all_since()","apn::groupnotification#apple_hash()","apn::notification#apple_hash()","apn::app#cert()","apnmigrationsgenerator#create_migrations()","apn::feedback::devices()","apn::groupnotification#devices()","addlaunchnotificationtoapnpullnotifications::down()","createpullnotifications::down()","makedevicetokenindexnonunique::down()","apn::pullnotification::latest_since()","apn::app#log_connection_exception()","apn::groupnotification#message_for_sending()","apn::notification#message_for_sending()","apn::errors::missingcertificateerror::new()","apnmigrationsgenerator::next_migration_number()","apn::connection::open_for_delivery()","apn::connection::open_for_feedback()","apn::groupnotification#payload()","apn::groupnotification#payload_size()","apn::app#process_devices()","apn::app::process_devices()","apn::feedback::process_devices()","apn::app::process_devices_for_cert()","apn::devicegrouping#same_app_id()","apn::app#send_group_notification()","apn::app#send_group_notifications()","apn::app::send_group_notifications()","apn::app::send_notifications()","apn::app#send_notifications()","apn::notification::send_notifications()","apn::app::send_notifications_for_cert()","apn::device#set_last_registered_at()","apnmigrationsgenerator::source_root()","apn::groupnotification#to_apple_json()","apn::notification#to_apple_json()","apn::device#to_hexa()","apn::device#token=()","addlaunchnotificationtoapnpullnotifications::up()","createpullnotifications::up()","makedevicetokenindexnonunique::up()",""],"info":[["APN","","APN.html","",""],["APN::App","","APN/App.html","",""],["APN::Connection","","APN/Connection.html","",""],["APN::Device","","APN/Device.html","","<p>Represents an iPhone (or other APN enabled device). An APN::Device can have\nmany APN::Notification.\n<p>In ...\n"],["APN::DeviceGrouping","","APN/DeviceGrouping.html","",""],["APN::Errors","","APN/Errors.html","",""],["APN::Errors::ExceededMessageSizeError","","APN/Errors/ExceededMessageSizeError.html","","<p>Raised when a notification message to Apple is longer than 256 bytes.\n"],["APN::Errors::MissingCertificateError","","APN/Errors/MissingCertificateError.html","",""],["APN::Feedback","","APN/Feedback.html","","<p>Module for talking to the Apple Feedback Service. The service is meant to\nlet you know when a device ...\n"],["APN::Group","","APN/Group.html","",""],["APN::GroupNotification","","APN/GroupNotification.html","",""],["APN::Notification","","APN/Notification.html","","<p>Represents the message you wish to send. An APN::Notification belongs to an\nAPN::Device.\n<p>Example:\n\n<pre>apn = ...</pre>\n"],["APN::PullNotification","","APN/PullNotification.html","",""],["AddLaunchNotificationToApnPullNotifications","","AddLaunchNotificationToApnPullNotifications.html","",""],["ApnMigrationsGenerator","","ApnMigrationsGenerator.html","","<p>Generates the migrations necessary for APN on Rails. This should be run\nupon install and upgrade of the ...\n"],["ApnOnRails","","ApnOnRails.html","",""],["ApnOnRails::Railtie","","ApnOnRails/Railtie.html","",""],["CreatePullNotifications","","CreatePullNotifications.html","",""],["MakeDeviceTokenIndexNonunique","","MakeDeviceTokenIndexNonunique.html","",""],["alert=","APN::GroupNotification","APN/GroupNotification.html#method-i-alert-3D","(message)","<p>Stores the text alert message you want to send to the device.\n<p>If the message is over 150 characters long ...\n"],["alert=","APN::Notification","APN/Notification.html#method-i-alert-3D","(message)","<p>Stores the text alert message you want to send to the device.\n<p>If the message is over 150 characters long ...\n"],["all_since","APN::PullNotification","APN/PullNotification.html#method-c-all_since","(app_id, since_date=nil)",""],["apple_hash","APN::GroupNotification","APN/GroupNotification.html#method-i-apple_hash","()","<p>Creates a Hash that will be the payload of an APN.\n<p>Example:\n\n<pre>apn = APN::GroupNotification.new\napn.badge ...</pre>\n"],["apple_hash","APN::Notification","APN/Notification.html#method-i-apple_hash","()","<p>Creates a Hash that will be the payload of an APN.\n<p>Example:\n\n<pre>apn = APN::Notification.new\napn.badge = 5\napn.sound ...</pre>\n"],["cert","APN::App","APN/App.html#method-i-cert","()",""],["create_migrations","ApnMigrationsGenerator","ApnMigrationsGenerator.html#method-i-create_migrations","()",""],["devices","APN::Feedback","APN/Feedback.html#method-c-devices","(cert, &block)","<p>Returns an Array of APN::Device objects that has received feedback from\nApple. Each APN::Device will ...\n"],["devices","APN::GroupNotification","APN/GroupNotification.html#method-i-devices","()",""],["down","AddLaunchNotificationToApnPullNotifications","AddLaunchNotificationToApnPullNotifications.html#method-c-down","()",""],["down","CreatePullNotifications","CreatePullNotifications.html#method-c-down","()",""],["down","MakeDeviceTokenIndexNonunique","MakeDeviceTokenIndexNonunique.html#method-c-down","()",""],["latest_since","APN::PullNotification","APN/PullNotification.html#method-c-latest_since","(app_id, since_date=nil)",""],["log_connection_exception","APN::App","APN/App.html#method-i-log_connection_exception","(ex)",""],["message_for_sending","APN::GroupNotification","APN/GroupNotification.html#method-i-message_for_sending","(device)","<p>This method conforms to the enhanced binary format.\ndeveloper.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingWIthAPS/CommunicatingWIthAPS.html#//apple_ref/doc/uid/TP40008194-CH101-SW4\n...\n"],["message_for_sending","APN::Notification","APN/Notification.html#method-i-message_for_sending","()","<p>Creates the binary message needed to send to Apple.\n"],["new","APN::Errors::MissingCertificateError","APN/Errors/MissingCertificateError.html#method-c-new","()",""],["next_migration_number","ApnMigrationsGenerator","ApnMigrationsGenerator.html#method-c-next_migration_number","(dirname)",""],["open_for_delivery","APN::Connection","APN/Connection.html#method-c-open_for_delivery","(options = {}, &block)","<p>Yields up an SSL socket to write notifications to. The connections are\nclose automatically.\n\n<pre>Example:\n ...</pre>\n"],["open_for_feedback","APN::Connection","APN/Connection.html#method-c-open_for_feedback","(options = {}, &block)","<p>Yields up an SSL socket to receive feedback from. The connections are close\nautomatically. Configuration ...\n"],["payload","APN::GroupNotification","APN/GroupNotification.html#method-i-payload","()",""],["payload_size","APN::GroupNotification","APN/GroupNotification.html#method-i-payload_size","()",""],["process_devices","APN::App","APN/App.html#method-i-process_devices","()","<p>Retrieves a list of APN::Device instnces from Apple using the\n<code>devices</code> method. It then checks to see if ...\n"],["process_devices","APN::App","APN/App.html#method-c-process_devices","()","<p>process_devices\n"],["process_devices","APN::Feedback","APN/Feedback.html#method-c-process_devices","()",""],["process_devices_for_cert","APN::App","APN/App.html#method-c-process_devices_for_cert","(the_cert)",""],["same_app_id","APN::DeviceGrouping","APN/DeviceGrouping.html#method-i-same_app_id","()",""],["send_group_notification","APN::App","APN/App.html#method-i-send_group_notification","(gnoty)",""],["send_group_notifications","APN::App","APN/App.html#method-i-send_group_notifications","()",""],["send_group_notifications","APN::App","APN/App.html#method-c-send_group_notifications","()",""],["send_notifications","APN::App","APN/App.html#method-c-send_notifications","()",""],["send_notifications","APN::App","APN/App.html#method-i-send_notifications","()","<p>Opens a connection to the Apple APN server and attempts to batch deliver an\nArray of group notifications. ...\n"],["send_notifications","APN::Notification","APN/Notification.html#method-c-send_notifications","()",""],["send_notifications_for_cert","APN::App","APN/App.html#method-c-send_notifications_for_cert","(the_cert, app_id)",""],["set_last_registered_at","APN::Device","APN/Device.html#method-i-set_last_registered_at","()",""],["source_root","ApnMigrationsGenerator","ApnMigrationsGenerator.html#method-c-source_root","()",""],["to_apple_json","APN::GroupNotification","APN/GroupNotification.html#method-i-to_apple_json","()","<p>Creates the JSON string required for an APN message.\n<p>Example:\n\n<pre>apn = APN::Notification.new\napn.badge = 5 ...</pre>\n"],["to_apple_json","APN::Notification","APN/Notification.html#method-i-to_apple_json","()","<p>Creates the JSON string required for an APN message.\n<p>Example:\n\n<pre>apn = APN::Notification.new\napn.badge = 5 ...</pre>\n"],["to_hexa","APN::Device","APN/Device.html#method-i-to_hexa","()","<p>Returns the hexadecimal representation of the device's token.\n"],["token=","APN::Device","APN/Device.html#method-i-token-3D","(token)","<p>Stores the token (Apple's device ID) of the iPhone (device).\n<p>If the token comes in like this:\n\n<pre>'&lt;5gxadhy6 ...</pre>\n"],["up","AddLaunchNotificationToApnPullNotifications","AddLaunchNotificationToApnPullNotifications.html#method-c-up","()",""],["up","CreatePullNotifications","CreatePullNotifications.html#method-c-up","()",""],["up","MakeDeviceTokenIndexNonunique","MakeDeviceTokenIndexNonunique.html#method-c-up","()",""],["README","","README.html","","<p>APN on Rails (Apple Push Notifications on Rails)\n<p>APN on Rails is a Ruby on Rails gem that allows you to ...\n"]]}}